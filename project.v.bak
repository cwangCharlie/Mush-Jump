module toplevel(KEY, CLOCK_50, LEDR);
	input CLOCK_50;
	input [3:0] KEY;
	
	output [2:0] LEDR;
	
	wire done;
	wire reset;
	wire shift;
	wire waste;
	
	datapath d1(.clk(CLOCK_50),
			 .enableShift(shift),
			 .doneP(done),
			 .drawS(1'b1),
			 .color(LEDR)
			 
			);
			
	control c1(.clk(CLOCK_50),
			.startG(KEY[1]),
			.doneP(done),
			.resetn(reset),
			.drawS(waste),
			.enableI(shift)
    );
	
	
endmodule


module datapath(
	input enableShift,
	input clk,
	input reset,
	input drawS,
	output reg doneP,
	output [2:0] color
	);
	
	reg [7:0] countx;
	reg [6:0] county;
	reg [10:0]xInitial;
	reg looped;
wire [10:0] address;
 
//counter 
always@(posedge clk) begin
	
if (drawS) begin
	if(reset||looped||doneP) begin // counter through 
		county <= 0;
		countx <=0;
		doneP <= 0;
	end
	else if(county == 7'd119 && countx == 8'd159) begin
		doneP <=1'b1;
	end
	else if(countx != 8'd159) begin
		countx <= countx + 1;
	end
	else if(countx == 8'd159)begin 
		county <=county +1;
		countx <= 0;
	end
	
end

end
//incremenet the x initial
always @(posedge clk) begin
	if (reset || looped) begin
		// reset 
		xInitial <= 0;
		looped<=1'b0;
	end
	else if(xInitial == 11'd1840) begin
		looped <= 1'b1;
	end
	else if(enableShift) begin // if in the incremenet state
		xInitial <= xInitial +1;
	end
	
end

assign address = (xInitial+countx)+(county*(11'd2000));


project1 u0(.address(address),
			.clock(clk),
			.data(3'd0),
			.wren(1'b0),
			.q(color)
			);
			

endmodule



module control(
    input clk,
    input startG,
	input doneP,
    output reg  resetn,
    output reg  drawS,
    output reg  enableI
    );

    reg [5:0] current_state, next_state; 
    
    localparam  BEGIN_state        = 5'd0,
                RESET_state        = 5'd1,
                DRAW_BACKGROUND    = 5'd2,
				WAIT_FOR_COMPLETE  = 5'd3,
				INCREMENT_BACKG	   = 5'd4;
				
    
    // Next state logic aka our state table
    always@(*)
    begin: state_table 
            case (current_state)
                BEGIN_state: next_state = startG ? RESET_state : BEGIN_state; // Loop in current state until value is input
                // // Loop in current state until go signal goes low
                RESET_state: next_state = DRAW_BACKGROUND; // Load the background
				DRAW_BACKGROUND: next_state = WAIT_FOR_COMPLETE; // goes for incrmentation
                WAIT_FOR_COMPLETE: next_state = doneP ? WAIT_FOR_COMPLETE : INCREMENT_BACKG;
				INCREMENT_BACKG: next_state = DRAW_BACKGROUND;
            default:     next_state = BEGIN_state;
        endcase
    end // state_table
   

    // Output logic aka all of our datapath control signals
    always @(*)
    begin: enable_signals
        // By default make all our signals 0
            resetn = 1'b0;
			drawS = 1'b0;
			enableI = 1'b0;

        case (current_state)
		    
            BEGIN_state: begin
            end
			RESET_state:begin
			resetn = 1'b1;
			end
			DRAW_BACKGROUND: begin
			drawS = 1'b1;
			end
			WAIT_FOR_COMPLETE: begin
			drawS = 1'b1;
			end
			INCREMENT_BACKG: begin
			enableI = 1'b1;
			end
        // default:    // don't need default since we already made sure all of our outputs were assigned a value at the start of the always block
        endcase
    end // enable_signals
   
    // current_state registers
    always@(posedge clk)
    begin: state_FFs
            current_state <= next_state;
    end // state_FFS
endmodule

